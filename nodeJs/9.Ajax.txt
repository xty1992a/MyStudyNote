Ajax
	ajaxAPI:
	- 属性:
		- readyState:
			xmlHttp请求状态码,共有0,1,2,3,4;五种状态;通过监听它的变化可以获知通信状态;
			0:已建立,未初始化,尚未调用open()方法;
			1:已建立,尚未发送,尚未调用send()方法;
			2:已发送,信息尚未返回,已调用send()方法;
			3:已开始接受信息,尚未全部收完;
			4:已经接受完毕;
		- status:
			http请求的状态码,监听200;
		- onreadystatechage:
			事件:监听请求状态码的变化;
		- responseText:
			服务器以文本形式传回的内容(JSON等);
		- responseXML:
			服务器以xml格式传回的内容(xml);
			
	- 方法:
		- open();创建一个http请求,指定方法,url及是否异步
		- setRequestHeader();如果以post方法发送请求需要设置请求头,参数为"'Content-type','appliction/x-www-form-urlencoded'"
		- send();发送Ajax请求并接受回应;当状态码为4时,可以在responseText等xmlhttp对象的相应属性中获得;
		
		- abort():
			取消当前请求;多路请求时阻止旧的通信
		- getAllResponseHeaders()



	- 建立一个ajax连接过程:
			1.创建一个ajax对象,这个对象在高版本浏览器中用window的XMLHttpRequest创建;
				低版本浏览器中使用 ActiveXObject 创建,参数是'Microsoft-XMLHTTP';
				var xmlHttp;
				if(window.XMLHttpRequest){
					xmlHttp = new XMLHttpRequest();
				}else{
					xmlHttp = new ActiveXObject('Microsoft-XMLHTTP');
				}
			2.设置监听函数,该对象的readyState在通信过程中会发生变化;
				xmlHttp.onreadystatechage = function(){
					if(xmlHttp.readyState === 4 && xmlHttp.status === 200){
						//业务逻辑
					}
				}
				
			3.设置open请求
				xmlHttp.open('get', '/url');
				
				-post post请求需要设置请求头
					xmlhttp.setRequestHeader("Content-type","application/x-www-form-urlencoded");
				xmlHttp.open('post', '/url');
				
			4.发送;
				xmlHttp.send();
				-post post的数据作为参数发出;
				xmlHttp.send(str);
				
	

	- Ajax跨域问题
	
		ajax遵循同源政策,不同源的http连接将会被废弃,不同的服务器的资源无法直接引用,这就构成了跨域问题
		当实际应用中,需要跨域时,一般有两种解决方案
		
		跨域问题的深层原因:当一个网页来自服务器A,网页内又向服务器B发起ajax请求,即使服务器能够正确响应,并返回资源,该资源也会被ajax引擎拒绝并废弃;
		
		- jsonp:使用script标签的src属性引入的方式绕过ajax引擎,因此这种方式只能使用get方法请求资源(src的请求默认是get)
		
			jquery中的jsonp:
			客户端: 	在url中添加'?callback=?'
		
			服务器端:	var callback = req.query.callback
						将需要返回的数据封装为json
						res.send(callback + '(' + json + ')');
		
		- cors
			只需要在服务器端设置
			res.set('Access-Control-Allow-Origin', '*');
			res.header("Access-Control-Allow-Origin", "//允许跨域的网站域名")
	
	
	
	
	
	
	
	
	
	
	
	
	
	