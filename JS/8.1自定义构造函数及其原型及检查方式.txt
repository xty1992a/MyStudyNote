
我们可以自己创建构造函数,这样就可以批量生产同一类型的对象,通过对其命名函数的设定,可以对其实现分组.

构造函数
  创建一个构造函数，专门用来创建Person对象的
		构造函数就是一个普通的函数，创建方式和普通函数没有区别,
		不同的是构造函数习惯上首字母大写
	  
	  构造函数和普通函数的区别就是调用方式的不同
		普通函数是直接调用，而构造函数需要使用new关键字来调用
	  
	  构造函数的执行流程：
		1.立刻创建一个新的对象
		2.将新建的对象设置为函数中this,在构造函数中可以使用this来引用新建的对象
		3.逐行执行函数中的代码
		4.将新建的对象作为返回值返回
	  
	  使用同一个构造函数创建的对象，我们称为一类对象，也将一个构造函数称为一个类。
		我们将通过一个构造函数创建的对象，称为是该类的实例
	  
	  this的情况：
		1.当以函数的形式调用时，this是window
		2.当以方法的形式调用时，谁调用方法this就是谁
		3.当以构造函数的形式调用时，this就是新创建的那个对象(实例)
			  	
	实例:
		function Person(name,age,gender){
				this.name = name;
				this.age = age;
				this.gender=gender;
				this.sayName= function(){			//在构造函数自身中创建重复的属性或方法会使其每创建一个对象都重复创建,请向构造函数的原型对象中添加.
					console.log(name);
				};
		使用Person()函数构建一个新的对象.
		var swk = new Person("孙悟空",18,"男");
	
------------------------
	原型对象(prototype)
		原型是每个函数都存在的隐藏属性prototype,它对应着一个对象.
		*原型也有原型,原型的原型也有原型,直到Object为止,Object的原型没有原型
		普通函数的prototype没有作用,但如果函数作为构造函数使用时,它可以作为该构造函数所有实例均可访问的公共仓库使用.
		当访问一个对象的属性或方法时,如果自身内没有该属性,则会去创建它的构造函数的原型中寻找.原型中如果没有,将去原型的原型对象中找,直到Object为止,Object的原型没有原型.
		构造函数中所有共有的属性或方法可以添加到构造函数的原型对象中.
				
		
		向构造函数的原型中添加方法:
		
		Person.prototype.sayName = function(){
							console.log(name);
						}
	
------------------------	
		使用instanceof语句对对象进行检查,可以知道它是否属于某个构造函数的实例.
		语法 对象 instanceof 构造函数,返回布尔值.
		(swk instanceof Person
		)
		
------------------------
	修改某个对象的返回值

		直接console某个对象时,会返回[object Object],这是Object原型中设置了toString方法为[object Object],
		如果要修改,可以修改对象的构造函数的原型中的toString方法.
		Person.prototype.toString = function(){
			return "Person[name="+this.name+",age="+this.age+",gender="+this.gender+"]";
		}
		