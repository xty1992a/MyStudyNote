
正则表达式
	- 正则用来定义一些字符串的规则，程序可以根据这些规则来判断一个字符串是否符合规则，
		也可以将一个字符串中符合规则的内容提取出来。
	- 创建正则表达式
		- var reg = new RegExp(条件,"匹配模式");  //该方式可临时传参
		- var reg = /正则表达式/匹配模式;
						
	- 方法：
		test()
			- 可以用来检查一个字符串是否符合正则表达式
			- 如果符合返回true，否则返回false
						
	- 语法：
		匹配模式：
			i:忽略大小写
			g:全局匹配模式
			- 设置匹配模式时，可以都不设置，也可以设置1个，也可以全设置，设置时没有顺序要求
			
		正则语法		
			| 或
			[] 或
			[^ ] 除了
			[a-z] 小写字母
			[A-Z] 大写字母
			[A-z] 任意字母
			[0-9] 任意数字
		
		量词
			-通过量词来设置一个内容出现的次数.
			-量词只对它所紧随的元素起效.
			- {n} 只出现n次
			- {m , n} 出现m-n次
			- {m,} 出现m次及以上
			- + 至少一次,相当于{1,}
			- * 0次或多次,相当于{0,}
			- ? 0次或1次,相当于{0,1}
			
		^和$分别表示开头和结尾,如果同时出现,则要求字符串必须完全符合^$内的规则.
		
		转义
		使用\进行转义
		.用\.表示
		\用\\表示
		
		\w
		- 任意字母、数字、_  [A-z0-9_]
		\W
		- 除了字母、数字、_  [^A-z0-9_]
		\d
		- 任意的数字 [0-9]
		\D
		- 除了数字 [^0-9]
		\s
		- 空格
		\S
		- 除了空格
		\b
		- 单词边界 严格比对单词如/\bchildb\/会选中child而不会选中children
		\B
		- 除了单词边界
		
		-去除字符串前后的空格.
			str= str.replace(/^\s*|\s*$/g,"");
		
		- 电子邮件的判断
		思路:首先列出电子邮件的命名规则
			任意字母数字下划线    .任意字母数字下划线  @   任意字母数字     .任意字母（2-5位）   .任意字母（2-5位）
			/^\w{3,}(\.\w+)*@[0-9A-z]+(\.[A-z]{2,5}){1,2}$/			
			
			
			
			
			
			
			
			
			