运算符（操作符）
	- 使用运算符可以对一个或多个值进行运算
	- 比如：typeof就是一个运算符，可以用来检查变量的数据类型

	- 运算符的优先级
	- 和数学中一样，JS中的运算符也有优先级，
		比如：先乘除后加减，先&&后||
	- 具体优先级可以通过查询表格来判断，越靠上的运算符优先级越高
		优先级越高越先计算，如果优先级相同则从左到右依次计算。
	- 使用运算符时，如果优先级搞不清，可以使用()来提升优先级。	
	
-----------------------------------------------------------------------

	- 一元运算符
	
		- 一元的+ 和 一元的-
			- 一元的+和-，实际上就相当于数学中正负号
			- 一元的+不会改变值的符号，一元的-会将值的符号取反。
			- 对于非数值，这两个符号，会将他们转换为Number，然后再计算。
				所以我们可以用他们来将一个非数字转换为数字。
			
		- 自增和自减
			- 自增，自增可以使一个值自增1
				- 自增使用++来表示
				- 前++ 是自增后的新值
					- ++a
				- 后++ 是自增前的原值
					- a++
				- 无论是++a还是a++都会立即使变量a立即自增1.	
			
			- 自减，自减可以使一个值自减1	
				- 自减使用--来表示
				- 前-- 是自减后的新值
					- --a
				- 后-- 是自减前的原值
					- a--
				- 无论是--a还是a--都会立即使变量a立即自减1.	

			
	- 二元运算符：
			会将符号两端的数值转换为Number,然后进行计算.
			
		+ : 对符号两侧的值进行加法运算
		- : 对符号两侧的值进行减法运算
		* : 对符号两侧的值进行乘法运算
		/ : 对符号两侧的值进行除法运算
		% : 对符号两侧的值进行取模运算
		
		注意：任何值(包括NaN)和字符串相加都会转换为字符串，并做拼串的操作。
				其余情况都会转换为Number并做加法。
			  任何值(不包括字符串)和NaN做运算，结果都是NaN。
	
	
	- 三元运算符 
		语法:
		
			表达式1?表达式2:表达式3;
		
			如果表达式1的值为true,执行表达式2并返回结果.
			如果表达式1的值为false,执行表达式3并返回结果.
			
			例子:
			var a=20;
			var b=15;
			a>b ? alert("a大"):alert("b大")
			三个值时可以继续比较:
			var a=20;
			var b=15;
			var c=21;
			  max=a>b ? a : b;
			  max=max>c ? max : c;
			  
			也可以写成如下形式:
			  max=a>b ? a>c?a:c : b>c?b:c;
