数组的方法
	-push()
	向数组的末尾添加元素,将新元素使用,隔开传入()中.该方法将会返回新数组的长度.-------会改变原数组
	-pop()
	删除数组末位的元素,并将其返回.调用一次,删除一个.-------会改变原数组
	-unshift()
	向数组的开头添加元素,将新元素使用,隔开传入()中.该方法将会返回新数组的长度.-------会改变原数组
	-shift()
	删除数组开头的元素,并将其返回.调用一次,删除一个.-------会改变原数组
	
	-slice(start<=,>end)
	从数组中选中指定开始位置开始,到指定结束位置前一个元素之间的元素,作为一个子数组返回,不会改变原数组.如果没有指定结束,将截取开始之后的所有元素.
	*可以使用负数倒数计算.-------不会改变原数组
	
	-splice(start,数量,元素1...)
	从数组中删除指定位置开始之后的指定数量元素,并返回被删除的元素.同时可传入新元素,将被添加到数组中被删除的位置.-----会改变原数组.
	
	
	-concat(数组1,数组2,元素1,元素2...)
	用来拼接两个数组,将新数组返回.------不会改变原数组
	
	-join("连接符")
	将数组中的元素提取出来转换为一个字符串,默认使用,隔开,可以传入自定义的字符串作为间隔符,也可以传入一个空串使元素直接连接.
	
	-reverse()
	将数组进行倒序排列,------会改变原数组
	
	-sort(回调函数)
	默认对数组按照字符编码的排序进行排序.如果要按照其他方式排序,需要新建一个回调函数,该函数应提供两个形参,然后对传入的元素进行操作,返回值小于等于0,不改变顺序,返回值大于0,交换位置.------会改变原数组.
	arr.sort(function(a,b){
		return a-b;
	})
	
	数组去重
	//去除数组中重复的数字
	arr.forEach(function(a,b,c){            //a是正在遍历的元素,b是正在遍历的参数的 索引
		for(var i=b+1;i<arr.length;i++){	//提取foreach循环中所有a的下一个元素
			if(arr[i] == a){				//如果foreach的元素与内部循环中的元素相同
				arr.splice(i,1);			//删除第i个元素
				i--;						//i自减,再次从上一位计算,排除连续数字
			}
		}
	});
	fuction quchong(arr){
		for(i=0;i<arr.length;i++){
			for(j=i+1;j<arr.length;j++){
				if(arr[i]==arr[j]){
					arr.splice(j,1);
					j--;
				}
			}
		}
	}
	
+++++++++++++++++++++++++++++++++++++++
	数组的新方法
	-indexOf()
		返回数组中找到的第一个元素的位置,如果没有则返回-1;
	例如:
		var arr = ["apple","orange","pear"];
		console.log(arr.indexOf("orange")) //返回1;
		
	-filter()
		返回一个新的数组,保存匹配到的数组元素.
	例如:
		var arr = [
		  {"name":"apple", "count": 2},
		  {"name":"orange", "count": 5},
		  {"name":"pear", "count": 3},
		  {"name":"orange", "count": 16},
		];
		   
		var newArr = arr.filter(function(item){
		  return item.name === "orange";
		});
		 
		 
		console.log("Filter results:"+newArr);//返回一个新数组,保存这两个name为orange的变量.
		
	- map(function(item,index){})
		内置了一个for循环,返回对旧数组处理之后的新数组.
		
	
	
	
	
	